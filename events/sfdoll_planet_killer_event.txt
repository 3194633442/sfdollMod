namespace = sfdoll_planet_killer_event
#id标准写法为namespace的值加上编号

planet_event = {
	id = sfdoll_planet_killer_event.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 3 }
		from = {
			owner = {
				#save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 5
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {
				kill_pop = yes
			}
			destroy_colony = yes
		}

		#炸的是恒星
		if = {
			limit =  { is_star = yes }
			from = {
				owner = {
					#初次炸恒星
					if = {
						limit = {
							NOT = { has_country_flag = cracked_first_star }
						}
						set_country_flag = cracked_first_star
					}
				}
			}
			#变成黑洞
			change_pc = pc_black_hole
			clear_deposits = yes
			reset_planet = yes
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
		
		#行星需要缩小
		# if = {
		# 	limit = { is_star = no }
		# 	set_planet_size = 25
		# }
		
		# set_planet_entity = {
		# 	entity = black_hole_sfdoll_entity
		# }

		# set_planet_entity = {
		# 	entity = black_hole_sfdoll_entity
		# }
		#炸球相关
		# change_pc = pc_shattered
		# 	clear_deposits = yes
		
		#改星系的star_class为黑洞，可能涉及建造物质解压巨构，会把所有恒星变黑洞
		# if = {
		# 	limit = { is_star = yes }
		# 	solar_system = {
		# 		set_star_class = sc_black_hole
		# 	}
		# }

		# 特效?测试
		# create_ambient_object = {
		# 	type = "destroyed_system"
		# 	location = this
		# }
		# last_created_ambient_object = {
		# 	set_ambient_object_flag = destroyed_system_effect
		# 	set_location = {
		# 		target = prev
		# 		distance = 0
		# 		angle = random
		# 	}
		# }
		# if = {
		# 	limit = { is_star = yes }
		# 	create_ambient_object = {
		# 		type = "star_explosion"
		# 		play_animation_once = yes
		# 		location = this
		# 	}
		# 	last_created_ambient_object = {
		# 		set_location = {
		# 			target = prev
		# 			distance = 0
		# 			angle = random
		# 		}
		# 	}
		# }
	}
}

#跨星系攻击触发
planet_event = {
	id = sfdoll_planet_killer_event.2
	title = "sfdoll_planet_killer_event.2"
	desc = "sfdoll_planet_killer_event_2_desc"
	is_triggered_only = yes
	immediate = {
		solar_system = {
			save_event_target_as = system_source_of_planet_killer
		}
		from = {
			save_event_target_as = fleet_source_of_planet_killer
		}
		from = {
			owner = {
				country_event = {
					id = sfdoll_planet_killer_event.3
				}
			}
		}
	}
}

#选择攻击目标
country_event = {
	id = sfdoll_planet_killer_event.3
	title = "sfdoll_planet_killer_event.3"
	desc = "sfdoll_planet_killer_event_3_desc"
	is_triggered_only = yes
	picture = GFX_evp_sfdoll_ship_in_orbit
	immediate = {
		#计数变量
		set_variable = {
			which = count_sfdoll_planet_killer_target
			value = 1
		}

		#清除之前留下的event target
		clear_target_of_pk_sfdoll_effect = yes

		#遍历符合条件的星系
		while = {
			count = 4
			random_system = {
				limit = {
					distance = {
						source = event_target:system_source_of_planet_killer
						max_jumps = 4
					}
	
					root = {
						check_variable = {
							which = count_sfdoll_planet_killer_target
							value > 0
						}
					}
					NOT = {
						has_star_flag = flag_sfdoll_planet_killer_target
					}
				}
	
				star = {
					#为不同选项添加不同的target
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 1
								}
							}
						}
						save_global_event_target_as = target_1_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 2
								}
							}
						}
						save_global_event_target_as = target_2_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 3
								}
							}
						}
						save_global_event_target_as = target_3_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 4
								}
							}
						}
						save_global_event_target_as = target_4_of_pk_sfdoll
					}
				}
				set_star_flag = flag_sfdoll_planet_killer_target
	
				#遍历了一次,减少统计变量
				root = {
					change_variable = {
						which = count_sfdoll_planet_killer_target
						value = 1
					}
				}
			}

		}
		#清除计算target数的变量
		clear_variable = count_sfdoll_planet_killer_target
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_1
		trigger = {
			exists = event_target:target_1_of_pk_sfdoll
		}

		event_target:target_1_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_2
		trigger = {
			exists = event_target:target_2_of_pk_sfdoll
		}
		event_target:target_2_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_3
		trigger = {
			exists = event_target:target_3_of_pk_sfdoll
		}
		event_target:target_3_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}
	option = {
		name = sfdoll_planet_killer_event_3_option_4
		trigger = {
			exists = event_target:target_4_of_pk_sfdoll
		}
		event_target:target_4_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		#sfdoll_planet_killer_event_3_option_5:0 "下一页"
		name = sfdoll_planet_killer_event_3_option_5
		trigger = {
			exists = event_target:target_1_of_pk_sfdoll
			exists = event_target:target_2_of_pk_sfdoll
			exists = event_target:target_3_of_pk_sfdoll
			exists = event_target:target_4_of_pk_sfdoll
		}
		hidden_effect = {
			country_event = {
				id = sfdoll_planet_killer_event.3
			}
		}
	}

	option = {
		#清除星系被选择过的flag，重新选择
		name = sfdoll_planet_killer_event_3_option_6
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
		country_event = { id = sfdoll_planet_killer_event.3	}
	}
	option = {
		#取消本次攻击
		name = sfdoll_planet_killer_event_3_option_7
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
		break = yes
	}
}

#中间事件，转到摧毁星系事件
fleet_event = {
	id = sfdoll_planet_killer_event.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:attacked_by_planet_killer = {
			planet_event = {
				id = sfdoll_planet_killer_event.5
			}
		}
	}
}

#摧毁恒星系，this为目标恒星，from为发射武器的舰队
planet_event = {
	id = sfdoll_planet_killer_event.5
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		remove_flag_sfdoll_planet_killer_target_effect = yes
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				#save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
			}
		}
		solar_system = { save_event_target_as = destroyed_system }
		solar_system = {
			destroy_star_system = yes
		}
		from = {
			create_message = {
				type = PLANET_DESTROYED
				localization = message_sfdoll_pk_2
				days = 30
				target = prev
			}
		}
	}
}